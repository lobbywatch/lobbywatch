<?php

/**
* Implements hook_views_api().
*/
function lobbywatch_views_api() {
  return array(
  'api' => 3,
  'path' => drupal_get_path('module', 'lobbywatch') . '/views',
  );
}
//- See more at: http://www.grasmash.com/article/demystifying-views-api-developers-guide-integrating-views#sthash.t41eZIbU.dpuf

/**
 * Implements hook_menu().
 */
function lobbywatch_menu() {
//   dpm('passed');
  $items = [];

//   $items['autocomplete/lobbywatch/search'] = array(
//      'title' => 'Autocomplete Suche',
// //     'page callback' => 'drupal_get_form',
// //     'page arguments' => array('ajax_example_simple_autocomplete'),
// //     'access arguments' => array('access user profiles'),
// //     'file' => 'ajax_example_autocomplete.inc',
// //     'weight' => 10,
// //     'path' => 'parlamentarier/autocomplete',
//     'page callback' => '_lobbywatch_search_autocomplete',
// //     'callback' => '_lobbywatch_parlamentarier_autocomplete',
//     'type' => MENU_CALLBACK,
//     'access arguments' => array('access lobbywatch general content'),
//     'file' => 'lobbywatch.daten.inc',
//   );

  $items['daten/parlamentarier-intern'] = array(
    'title' => 'Parlamentarier (intern)',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_parlamentarier_list',
    'access arguments' => array('access lobbywatch unpublished content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
    );

  $items['daten/parlamentarier/%/%'] = array(
//     'title' => 'Parlamentarier',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Parlamentarier:', '', 'parlamentarier', 2, 3),
    'page callback' => '_lobbywatch_parlamentarier_id',
    'page arguments' => array(2, 3),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/parlamentarier/%'] = array(
//     'title' => 'Parlamentarier',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Parlamentarier:', '', 'parlamentarier', 2),
    // TODO set 'title callback' for adding name
    'page callback' => '_lobbywatch_parlamentarier_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
    );

  $items['daten/organisation'] = array(
    'title' => 'Organisationen',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_organisation_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/organisation/%'] = array(
//     'title' => 'Organisation',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('', '', 'organisation', 2),
    'page callback' => '_lobbywatch_organisation_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/partei'] = array(
    'title' => 'Parteien',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_partei_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/partei/%'] = array(
//     'title' => 'Partei',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Partei:', '', 'partei', 2),
    'page callback' => '_lobbywatch_partei_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/kommission'] = array(
    'title' => 'Kommissionen',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_kommission_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/kommission/%'] = array(
//     'title' => 'Kommission',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('', 'des National- und des Ständerates', 'kommission', 2),
    'page callback' => '_lobbywatch_kommission_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/branche'] = array(
    'title' => 'Branchen',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_branche_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/branche/%'] = array(
//     'title' => 'Branche',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Branche:', '', 'branche', 2),
    'page callback' => '_lobbywatch_branche_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/lobbygruppe'] = array(
    'title' => 'Lobbygruppen',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_interessengruppe_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/lobbygruppe/%'] = array(
//     'title' => 'Lobbygruppe',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Lobbygruppe:', '', 'interessengruppe', 2),
    'page callback' => '_lobbywatch_interessengruppe_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/zutrittsberechtigter'] = array(
    'title' => 'Zutrittsberechtigte',
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_zutrittsberechtigung_list',
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['daten/zutrittsberechtigter/%'] = array(
//     'title' => 'Zutrittsberechtigte(r)',
    'title callback' => '_lobbywatch_page_title',
    'title arguments' => array('Zutrittsberechtigte(r):', '', 'zutrittsberechtigung', 2),
    'page callback' => '_lobbywatch_zutrittsberechtigung_id',
    'page arguments' => array(2),
    'access arguments' => array('access lobbywatch general content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['artikel/kategorien'] = array(
    'title' => 'Artikelkategorien', //Kategorienübersicht
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_category_list',
    'page arguments' => array('2'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['artikel/lobbygruppen'] = array(
    'title' => 'Artikel zu Lobbygruppen', //Kategorienübersicht
    'title callback' => 'lt',
    'page callback' => '_lobbywatch_category_lobby_group_list',
    'page arguments' => array('3'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'lobbywatch.daten.inc',
  );

  $items['admin/config/lobbywatch'] = array(
      'title' => 'Lobbywatch',
      'description' => 'Admin Lobbywatch. Refresh Website DB.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('lobbywatch_admin_form'),
      'access arguments' => array('access lobbywatch admin'),
      'file' => 'lobbywatch.daten.inc',
      'weight' => -20,
  );

    $items['export/non-public-historised'] = array(
      'title' => 'Non Public Exports',
      'title callback' => 'lt',
      'page callback' => '_lobbywatch_non_public_historised_exports_page',
      'page arguments' => array('0'),
      'access arguments' => array('access lobbywatch advanced content'),
      'type' => MENU_CALLBACK,
      'file' => 'lobbywatch.daten.inc',
    );

    $items['export/non-public-unpublished'] = array(
      'title' => 'Non Public Exports',
      'title callback' => 'lt',
      'page callback' => '_lobbywatch_non_public_unpublished_exports_page',
      'page arguments' => array('0'),
      'access arguments' => array('access lobbywatch unpublished content'),
      'type' => MENU_CALLBACK,
      'file' => 'lobbywatch.daten.inc',
    );

    $items['export/non-public-db-dump'] = array(
      'title' => 'Non Public Exports',
      'title callback' => 'lt',
      'page callback' => '_lobbywatch_non_public_db_dump_page',
      'page arguments' => array('0'),
      'access arguments' => array('access lobbywatch unpublished content'),
      'type' => MENU_CALLBACK,
      'file' => 'lobbywatch.daten.inc',
    );

  return $items;
}

/**
* Implements hook_permission().
*/
function lobbywatch_permission() {
  return array(
    'access lobbywatch general content' => array(
      'title' => t('Access general content of the lobbywatch module'),
    ),
    'access lobbywatch advanced content' => array(
      'title' => t('Access advanced content of the lobbywatch module, e.g. historised data for registered users'),
    ),
    'access lobbywatch unpublished content' => array(
      'title' => t('Access unpublished (nicht freigegeben) content of the lobbywatch module'),
    ),
    'access lobbywatch admin' => array(
      'title' => t('Access admin content of the lobbywatch module'),
    ),
  );
}

/**
 * Blocks of ibex utils.
 *
 * Implements hook_block_info().
 */
function lobbywatch_block_info() {
  $blocks['lobbywatch_search'] = array(
    'info' => lt('Lobbywatchsuche'),
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 40,
    );
  $blocks['parlamentarier_erfasst'] = array(
      'info' => t('Parlamentarier erfasst'),
      //       'cache' => DRUPAL_NO_CACHE,
      'weight' => 40,
  );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lobbywatch_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'lobbywatch_search':
      $block['subject'] = lt('Suchen');
      // Form in a block: http://zerotodrupal.com/content/creating-form-block-drupal-7
      $block['content'] = drupal_get_form('lobbywatch_autocomplete_search_form');
      break;
  }
  return $block;
}

/**
 * Define the form to be returned.
 *
 * Note that drupal passes in two parameters,
 * $form - which holds all of the elements of the form
 * $form_state - a special array of settings & values needed by Drupal
 */
function lobbywatch_autocomplete_search_form($form, &$form_state) {
  // Now the fun begins. For this simple example,
  // we will only provide two form elements.
  // 1. an input for the friend's email address
  // 2. a submit button
  // You can add as much or as little to this form as
  // needed. See the forms api for all possible elements.

  // Fast JSON response without Drupal
  // No caching of forms in Drupal, so we are save to change the path according to the user permissions
  if (!empty($GLOBALS['lobbywatch_mode']) && $GLOBALS['lobbywatch_mode'] == 'TEST') {
    $path = 'sites/trial/modules/lobbywatch';
  } else {
    $path = 'sites/all/modules/lobbywatch';
  }
  $auto_path = $GLOBALS['base_url'] . "/$path/lobbywatch_autocomplete_json.php";
//   dpm($auto_path);
  $auto_path .= '/' . get_lang();
  if (user_access('access lobbywatch admin') || (user_access('access lobbywatch advanced content') && user_access('access lobbywatch unpublished content'))) {
    $auto_path .= '/all';
  } else if (user_access('access lobbywatch advanced content')) {
    $auto_path .= '/hist';
  } else if (user_access('access lobbywatch unpublished content')) {
    $auto_path .= '/unpubl';
  } else {
    $auto_path .= '/publ';
  }
  // Normal Drupal menu call back path
  //$auto_path = 'autocomplete/lobbywatch/search';

  // Autocomplete with min num chars: ref http://drupal.stackexchange.com/questions/78727/enforcing-minimum-number-of-characters-for-autocomplete-path
  $form['search_field'] = array(
    // #type tells drupal what kind of element to build
    '#type' => 'textfield',
    // we want this field to be required
    '#required' => true,
    // The "label" for this field
    '#title' => lt("Suche Parlamentarier, Organisationen, Lobbygruppen, …"),
    '#size' => 85,
    '#maxlength' => 300,
    // Optional description
    '#description' => lt('Suchtext eingeben, kurz warten und auswählen'),
//     '#autocomplete_path' => (user_access('access lobbywatch advanced content') || user_access('access lobbywatch unpublished content') || user_access('access lobbywatch admin') ? 'autocomplete/lobbywatch/search' : $GLOBALS['base_url'] . '/sites/all/modules/lobbywatch/lobbywatch_autocomplete_json.php'),
    '#autocomplete_path' => $auto_path,
    // Autocomplete, autosubmit, ref: https://drupal.org/node/1772490
    '#attributes' => array('class' => array('auto_submit'), 'placeholder' => lt("Suche via Auswahlliste: Suchtext eingeben, eine Sekunde warten und auswählen"),
      'title' => lt("Suchtext eingeben, kurz warten und auswählen")),
//     '#attributes' =>[]
//     '#attributes' => array('class' => array('use-ajax-submit')),
  );

  $show_type = array('text' => lt('Text'), 'graphic' => lt('Graphik'));
  $form['result_type'] = array(
      '#type' => 'radios',
      '#title' => lt('Darstellung:'),
      '#default_value' => 'text',
      '#options' => $show_type,
//       '#description' => t(''),
      '#access' => user_access('access lobbywatch visual content'), // TODO permission: not really proper to acccess sub module permission, but for the moment it's OK
      '#attributes' => array('class' => array('admin'),
          'title' => lt("Sollen die Resultate graphisch angezeigt werden?")),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    // #value is the text to display inside the button
    // ctools, autosubmit, ref: https://drupal.org/node/1110222
//       '#attributes' => array('class' => array('use-ajax-submit ctools-auto-submit-click')),
    '#value' => lt('Zeige'),
  );

//   dpm($form['search_field'], 'lobbywatch_autocomplete_search_form');

  return $form;
}

/*
 * Define a validation function that drupal will
 * automatically call when the submit button is pressed.
 *
 * For this example, I will use the valid_email_address()
 * function to verify that the email address looks
 * proper. If it's not, we'll use form_set_error()
 * function to tell drupal we didn't pass validation.
 */
function lobbywatch_autocomplete_search_form_validate($form, &$form_state) {
  // Drupal stows away all of the form elements into
  // $form_state['values']. We find our 'friends_email'
  // element and assign it to a variable for easy
  // reference.
  $name = $form_state['values']['search_field'];

//   // If it's not a valid email, set an error.
//   if(valid_email_address($email) == 0) {
//     // form_set_error() tells drupal that it should not proceed.
//     // The first parameter is the form element that didn't pass
//     // validation. The second is the message to tell the user.
//     form_set_error('friends_email', t('Not a valid email address'));
//   }
}

/*
 * Define a submit function that drupal will
 * automatically call when submit is pressed (and all validators pass)
 */
function lobbywatch_autocomplete_search_form_submit($form, &$form_state) {
  // Get the email value again
  $search_text = $form_state['values']['search_field'];
  $result_type = $form_state['values']['result_type'];
//   dpm($form_state, '$form_state');
//   dpm($result_type, '$result_type');
  // Now we call drupal_mail() to send a message to this person.
  // Note that this basically tells drupal to call tellafriend_mail().
//   $message = drupal_mail('tellafriend', 'notify', $email, language_default());
  // Check the message results and let the user know if php was able to sent the email.

  $result = preg_match('/\[(\w+)=([0-9]+)\]$/', $search_text, $matches);
  if ($result > 0) {
    // If $result is nonzero, we found a match and can use it as the index into $matches.
    $table = $matches[1]; // check_plain() not necessary
    $id = $matches[2];
    if ($result_type === 'graphic' && in_array($table, array('parlamentarier', 'organisation'), true)) {
//       dpm('graphic', 'type');
//     df("daten/$table/$id", 'goto');
    // Verify that it's a valid nid.
      $options = array('query' => array('id' => $id));
      drupal_goto("daten/grafik/$table", $options);
    } else {
//       dpm('text!!', 'type');
      drupal_goto("daten/$table/$id");
    }
//     $node = node_load($nid);
//     if (empty($node)) {
//       form_error($form['node'], t('Sorry, no node with nid %nid can be found', array('%nid' => $nid)));
//       return;
//     }
  }
}

function lobbywatch_get_parteien($check_unpublished = true) {
  // Cache ref: http://www.lullabot.com/blog/article/beginners-guide-caching-data-drupal-7
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    db_set_active('lobbywatch');

    try {
      $sql = "SELECT partei.* FROM v_partei partei WHERE 1 "
          . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND partei.freigabe_datum <= NOW() ' : '') . " ;";

      $result = db_query($sql);

      while ($record = $result->fetchAssoc()) {
        $cache[$record['id']] = $record;
      }
    } finally {
      // Go back to the default database,
      // otherwise Drupal will not be able to access it's own data later on.
      db_set_active();
    }
  }
  return $cache;
}

function lobbywatch_get_kommissionen($check_unpublished = true) {
  // Cache ref: http://www.lullabot.com/blog/article/beginners-guide-caching-data-drupal-7
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    db_set_active('lobbywatch');

    try {
      $sql = "SELECT kommission.* FROM v_kommission kommission WHERE 1 "
          . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND kommission.freigabe_datum <= NOW() ' : '') . " ;";

      $result = db_query($sql);

      while ($record = $result->fetchAssoc()) {
        $cache[$record['id']] = $record;
      }
    } finally {
      // Go back to the default database,
      // otherwise Drupal will not be able to access it's own data later on.
      db_set_active();
    }
  }
  return $cache;
}

function _lobbywatch_get_kommission_translated_name($kommission_abkuerzung_de) {
  if ($kommission_abkuerzung_de == 'All') {
    return t('All');
  }
  $kommissionen = lobbywatch_get_kommissionen();
  // See also lobbywatch_handler_filter_parlamentarier_kommissionen_string.inc get_value_options()
  foreach ($kommissionen as $id => $kommission) {
    // TODO A Hack: just delete -NR, -SR
    if (ends_with($kommission['abkuerzung'], '-SR')) {
      continue;
    } else if (preg_match('/-(NR|V)$/', $kommission['abkuerzung'])) {
      $abbr_key = preg_replace('/-(NR|V)$/', '', $kommission['abkuerzung']);
    }  else {
      $abbr_key = $kommission['abkuerzung'];
    }
    $name_raw = translate_record_field($kommission, 'name');
    $name_raw = preg_replace('/( |-)(NR|V|CN)$/', '', $name_raw);
    $abbr = translate_record_field($kommission, 'abkuerzung');
    $abbr = preg_replace('/-(NR|V|CN)$/', '', $abbr);
    $name = mb_substr($name_raw, 0, 100);

//       $options[$abbr_key] = $name . ($name != $name_raw ? '…' : '') . ' (' . $abbr . ')';
    if ($abbr_key == $kommission_abkuerzung_de) {
      return $name_raw . ' (' . $abbr . ')';
    }
  }
  return false;
}

function lobbywatch_boot() {
  drupal_register_shutdown_function('_lobbywatch_shutdown');
}

function _lobbywatch_page_build_secs() {
  return round(timer_read('page')/1000, 2);
}

function lobbywatch_exit() {
}

function _lobbywatch_check_is_json_output() {
//   print drupal_get_http_header('Content-Type');
  return drupal_get_http_header('Content-Type') == 'application/json';
}

function _lobbywatch_check_is_html_output() {
//   print drupal_get_http_header('Content-Type');
  return preg_match('/html/', drupal_get_http_header('Content-Type'));
}

function _lobbywatch_shutdown() {
  if (_lobbywatch_check_is_html_output() && function_exists('user_access') && user_access('access lobbywatch admin')) {
    print '<div class="footer-processing admin"><small>Page execution time was ' . _lobbywatch_page_build_secs() . 's</small></div>';
  }
}

function lobbywatch_search_info() {
  return array(
      'title' => t('Lobbywatch'), // lt() is not known in dursh update, lt() is anyway not necessary here
      'path' => 'daten',
//       'conditions_callback' => '_lobbywatch_callback_search_conditions',
  );
}

// function _lobbywatch_callback_search_conditions($keys) {

// }

/**
 * Implements hook_search_access().
 */
function lobbywatch_search_access() {
  return user_access('access lobbywatch general content');
}

/**
 * Implements hook_search_execute().
 */
function lobbywatch_search_execute($keys = NULL, $conditions = NULL) {

  module_load_include('inc', 'lobbywatch', 'lobbywatch.daten');

  //   return _lobbywatch_parlamentarier_list();
  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $find = [];

//     dpm($keys, '$keys');
    $result_type = search_expression_extract($keys, 'type');
    $keys = search_expression_insert($keys, 'type', null); // remove
    // Replace wildcards with MySQL/PostgreSQL wildcards.

    $search_str = _lobbywatch_search_keyword_processing($keys);

//     $query_result = _lobbywatch_search_form_LIKE_UNION($search_str);
    $query_result = _lobbywatch_search_form_LIKE_search_table($search_str);

//     dpm((string) $union_query);

    // Workaround for https://www.drupal.org/node/2303337 / https://www.drupal.org/node/1634908
//     $count_query = db_select($merged_query, 'count_query');
//     $count_query->addExpression('COUNT(*)', 'num');

//     dpm((string) $count_query);

//     $paged_query = $merged_query->extend('PagerDefault')->limit(5);
//     $paged_query->setCountQuery($count_query);
//     dpm((string) $paged_query);
//     $query_result = $paged_query->execute();

//     $paged_query = $query->extend('PagerDefault')->limit(5);
//     dpm((string) $paged_query);
//     $query_result = $paged_query->execute();

    $lang_suffix = get_lang_suffix();

    $results = [];
    while ($record = $query_result->fetchAssoc()) {
//     foreach ($query_result as $record) {
//        dpm($record, '$record');

      //     if ($result_type === 'graphic') {
      // //       dpm('graphic', 'type');
      // //     df("daten/$table/$id", 'goto');
      //     // Verify that it's a valid nid.
      //       $options = array('query' => array('id' => $id));
      //       drupal_goto("daten/grafik/$table", $options);
      //     } else {
      // //       dpm('text!!', 'type');
      //       drupal_goto("daten/$table/$id");
      //     }

      $result = array(
          'title' => lt($record['page']) . ': ' . $record["name$lang_suffix"],
          'link' => $result_type === 'graphic'  && in_array($record['page'], array('parlamentarier', 'organisation'), true) ? url('grafik/' . check_plain($record['page']) . '/' . $record['id'], array('absolute' => TRUE)) : url('daten/' . check_plain($record['page']) . '/' . $record['id'], array('absolute' => TRUE)),
          'type' => $record['page'],
          'extra' => '',
          'snippet' => '',
          'language' => get_lang(), // return language of user
      );
      $results[] = $result;
    }

    return $results;
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }
}

// // Ref https://api.drupal.org/api/examples/ajax_example!ajax_example_autocomplete.inc/7
// function _lobbywatch_search_autocomplete($str = '', $check_unpublished = true) {

//   //   return _lobbywatch_parlamentarier_list();
//   // Use the database we set up earlier
//   // Ref: https://drupal.org/node/18429
//   db_set_active('lobbywatch');

//   try {
//     $table_sql = [];
//     $table = 'parlamentarier';
//     $table_sql[] = "SELECT '$table' as page, CONCAT_WS(', ', anzeige_name, rat, partei, kanton) as name, id FROM v_$table WHERE anzeige_name LIKE :str" . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND (im_rat_bis IS NULL OR im_rat_bis > NOW())' : '') . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND freigabe_datum <= NOW()' : '');
//     $table = 'zutrittsberechtigung';
//     $table_sql[] = "SELECT 'zutrittsberechtigter' as page, anzeige_name as name, id FROM v_$table WHERE anzeige_name LIKE :str" . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND (bis IS NULL OR bis > NOW())' : '') . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND freigabe_datum <= NOW()' : '');
//     foreach (Constants::$entities_web as $table => $page) {
//       $table_sql[] = "SELECT '$page' as page, anzeige_name as name, id FROM v_$table WHERE anzeige_name LIKE :str" . ($check_unpublished && !user_access('access lobbywatch unpublished content') ? ' AND freigabe_datum <= NOW()' : '');
//     }
//     $sql = 'SELECT tables.* FROM (' . implode("\n UNION \n", $table_sql) . ') tables LIMIT 20;';
//     $result = db_query($sql, array(':str' => "%$str%"));

//     //   dpm($result, 'result');

//     $items = [];
//     while($record = $result->fetchAssoc()) {
//       $key = check_plain($record['name']) . " [" . check_plain($record['page']). '=' . check_plain($record['id']) . "]";
//       $items[$key] = check_plain(ucfirst($record['page']) . ': ' . $record['name']);
//     }
//   } finally {
//     // Go back to the default database,
//     // otherwise Drupal will not be able to access it's own data later on.
//     db_set_active();
//   }

//   //   dpm($items, 'items');

//   drupal_json_output($items);
// }

/**
 * Implements hook_form_search_form_alter.
 *
 * @see https://api.drupal.org/api/drupal/modules!node!node.module/function/node_form_search_form_alter/7
 *
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $form_id
 */
function lobbywatch_form_search_form_alter(&$form, &$form_state, $form_id) {

//   dpm($form_id, '$form_id');

  if (isset($form['module']) && $form['module']['#value'] == 'lobbywatch' && user_access('access lobbywatch advanced content')) {

    // Add placeholder
    $form['basic']['keys']['#attributes']['placeholder'] = lt("Suche Parlamentarier, Organisationen, Lobbygruppen, …");
//     dpm($form, '$form');

    $show_type = array('text' => t('Text'), 'graphic' => lt('Graphik'));
    $form['result_type'] = array(
        '#type' => 'radios',
        '#title' => lt('Darstellung:'),
        '#default_value' => 'text',
        '#options' => $show_type,
        //       '#description' => t(''),
        '#access' => user_access('access lobbywatch visual content'), // TODO permission: not really proper to acccess sub module permission, but for the moment it's OK
        '#attributes' => array('class' => array('admin'),
          'title' => lt("Sollen die Resultate graphisch angezeigt werden?")),
    );
  }

  $form['#validate'][] = '_lobbywatch_search_validate';

}

/**
 * Implements hook_form_search_form_alter.
 *
 * @see https://api.drupal.org/api/drupal/modules!node!node.module/function/node_form_search_form_alter/7
 *
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $form_id
 */
function lobbywatch_form_search_block_form_alter(&$form, &$form_state, $form_id) {

//   dpm($form_id, '$form_id2');

    // Add placeholder
  $form[$form_id]['#attributes']['placeholder'] = lt("Suche Parlamentarier, Organisationen, Lobbygruppen, …");
//   dpm($form, '$form2');

}

/**
 * Callback for validate.
 *
 * @see https://api.drupal.org/api/drupal/modules!node!node.module/function/node_search_validate/7
 */
function _lobbywatch_search_validate($form, &$form_state) {
//   dpm('validate');
//   search_expression_insert($expression, $option);
  // Initialize using any existing basic search keywords.
  $keys = $form_state['values']['processed_keys'];

  // Insert extra restrictions into the search keywords string.
  if (isset($form_state['values']['result_type']) /*&& is_array($form_state['values']['type'])*/) {
    // Retrieve selected types - Form API sets the value of unselected
    // checkboxes to 0.
//     $form_state['values']['result_type'] = array_filter($form_state['values']['result_type']);
//     if (count($form_state['values']['type'])) {
//       $keys = search_expression_insert($keys, 'type', implode(',', array_keys($form_state['values']['type'])));
//     }

  $keys = search_expression_insert($keys, 'type', $form_state['values']['result_type']);
  }

//   if (isset($form_state['values']['term']) && is_array($form_state['values']['term']) && count($form_state['values']['term'])) {
//     $keys = search_expression_insert($keys, 'term', implode(',', $form_state['values']['term']));
//   }
//   if (isset($form_state['values']['language']) && is_array($form_state['values']['language'])) {
//     $languages = array_filter($form_state['values']['language']);
//     if (count($languages)) {
//       $keys = search_expression_insert($keys, 'language', implode(',', $languages));
//     }
//   }
//   if ($form_state['values']['or'] != '') {
//     if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' ' . $form_state['values']['or'], $matches)) {
//       $keys .= ' ' . implode(' OR ', $matches[1]);
//     }
//   }
//   if ($form_state['values']['negative'] != '') {
//     if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' ' . $form_state['values']['negative'], $matches)) {
//       $keys .= ' -' . implode(' -', $matches[1]);
//     }
//   }
//   if ($form_state['values']['phrase'] != '') {
//     $keys .= ' "' . str_replace('"', ' ', $form_state['values']['phrase']) . '"';
//   }
  if (!empty($keys)) {
    form_set_value($form['basic']['processed_keys'], trim($keys), $form_state);
  }
}

// /**
//  * Implements hook_search_page
//  */
// function lobbywatch_search_page($results) {

// }

/**
 * Refresh materialized views. Check if materialized views up-to-date.
 *
 * Currently, only the mv_parlamentarier is used to get the last refresh date.
 *
 * @param string $only_if_modified refresh only if not modified
 * @return number -1 if up-to-date
 */
function _lobbywatch_refresh_materialized_views($base_table = null, $only_if_modified = true) {
  $start = time();
  db_set_active('lobbywatch_adv');

  try {
    if ($only_if_modified) {
      $ceck_table = $base_table ? $base_table : 'parlamentarier';
      $sql = "SELECT last_updated.last_updated < refreshed_date as up_to_date, last_updated.last_updated, refreshed.refreshed_date FROM (SELECT last_updated FROM v_last_updated_tables LIMIT 1) last_updated, (SELECT refreshed_date FROM mv_$ceck_table LIMIT 1) refreshed;";

      $result = db_query($sql);

      $record = $result->fetchAssoc();

      if ($record['up_to_date']) {
        return -1;
      }
    }

    if ($base_table == null) {
      db_query('CALL `refreshMaterializedViews`()');
    } else {
      db_query("REPLACE INTO `mv_$base_table` SELECT v.* FROM `v_${base_table}_raw` v;");
      db_query("REPLACE INTO `mv_search_table` SELECT v.* FROM `v_search_table_raw` v;"); // Update also search table
    }
    $end = time();
    $elapsed = $end - $start;
    return $elapsed;
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }
}

/**
 * Implements hook_cron().
 */
function lobbywatch_cron() {
// Call MV refresh directly from cron with mysql command, run_db_views.sh
//   $h = date('H');
//   // avoid refresh during work time
//   // Since it is very slow, split refresh into separate MVs
//   switch ($h) {
//     case 1: $elapsed = _lobbywatch_refresh_materialized_views('interessenbindung'); break;
//     case 2: $elapsed = _lobbywatch_refresh_materialized_views('mandat'); break;
//     case 3: $elapsed = _lobbywatch_refresh_materialized_views('organisation'); break;
//     case 4: $elapsed = _lobbywatch_refresh_materialized_views('parlamentarier'); break;
//     case 5: $elapsed = _lobbywatch_refresh_materialized_views('zutrittsberechtigung'); break;
//   }
//   if (0 < $h && $h < 6) {
//     if ($elapsed > 0) {
//       watchdog('lobbywatch', 'Refreshed materialized views, execution time %elapsed s.', array('%elapsed' => $elapsed), WATCHDOG_INFO);
//     } else {
//       watchdog('lobbywatch', 'Materialized views are up-to-date.', [], WATCHDOG_INFO);
//     }
//   }
}

function _lobbywatch_fetch_anzeige_name($table, $id, $lang = null) {
  $name = '';

  if ($lang === null) {
    $lang = get_lang();
  }
  $lang_suffix = get_lang_suffix($lang);

  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  $olddb = db_set_active('lobbywatch');

  try {
    // i18n
    $sql = "SELECT id, anzeige_name_de, name_de, anzeige_name_fr, name_fr FROM v_$table WHERE id=:id";
    $result = db_query($sql, array(':id' => check_plain($id)));

    if ($result) {
      $record = $result->fetchAssoc();
      $name = translate_record_field($record, 'anzeige_name_de', false, false, $lang);
    }
    //     df($record, '$record');
    //     df($name, '$name');
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active($olddb);
  }
  return $name;
}

function _lobbywatch_fetch_parlamentarier_title($table, $id) {
  $title = '';

  $lang = get_lang();
  $lang_suffix = get_lang_suffix();

  // Use the database we set up earlier
  // Ref: https://drupal.org/node/18429
  db_set_active('lobbywatch');

  try {
    $sql = "SELECT id, anzeige_name, name, nachname, vorname, geschlecht, rat$lang_suffix as rat, titel$lang_suffix, kanton_abkuerzung, kanton_name$lang_suffix, " . lobbywatch_lang_field('partei') . " as partei, im_rat_bis, im_rat_bis_unix FROM v_$table WHERE id=:id";
    $result = db_query($sql, array(':id' => check_plain($id)));


    if ($result) {
      $record = $result->fetchAssoc();
      $active = $record['im_rat_bis'] == null || $record['im_rat_bis_unix'] > time();
      $pers_title = $record["titel$lang_suffix"];
      // TODO i18n lang
      if ($lang == 'fr' && !$active && $pers_title == 'Le Conseiller national') {
        $pers_title = "L'ex conseiller national";
      } else if ($lang == 'fr' && !$active && $pers_title == 'La Conseillère nationale') {
        $pers_title = "L'ex conseillère nationale";
      } else if ($lang == 'fr' && !$active && $pers_title == 'Le Conseiller aux Etats') {
        $pers_title = "L'ex conseiller aux Etats";
      } else if ($lang == 'fr' && !$active && $pers_title == 'La Conseillère aux Etats') {
        $pers_title = "L'ex conseillère aux Etats";
      }
      // else $pers_title remains
      $title = (!$active && $lang == 'de' ? lt('Alt-') : '') . $pers_title . ' ' . $record['name'] . ', ' . ($record['partei'] ? $record['partei'] : lt('parteilos')) . ', ' . $record["kanton_name$lang_suffix"];
    }
    //     df($record, '$record');
    //     df($url_name, '$url_name');
  } finally {
    // Go back to the default database,
    // otherwise Drupal will not be able to access it's own data later on.
    db_set_active();
  }
  return $title;
}

function lobbywatch_preprocess_html(&$vars) {
//     dpm(current_path());
    if (starts_with(current_path(), 'daten')) {
      $vars['classes_array'][] = 'lobbywatch-db-page';
    } else {
      $vars['classes_array'][] = 'no-lobbywatch-db-page';
    }
}
